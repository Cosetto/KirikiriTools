void tTJSVariant::ChangeClosureObjThis(iTJSDispatch2 *)
tTJSVariant::tTJSVariant()
tTJSVariant::tTJSVariant(const tTJSVariant &)
tTJSVariant::tTJSVariant(iTJSDispatch2 *)
tTJSVariant::tTJSVariant(iTJSDispatch2 *,iTJSDispatch2 *)
tTJSVariant::tTJSVariant(const tjs_char *)
tTJSVariant::tTJSVariant(const tTJSString &)
tTJSVariant::tTJSVariant(const tjs_nchar *)
tTJSVariant::tTJSVariant(const tjs_uint8 *,tjs_uint)
tTJSVariant::tTJSVariant(bool)
tTJSVariant::tTJSVariant(tjs_int32)
tTJSVariant::tTJSVariant(tjs_int64)
tTJSVariant::tTJSVariant(tjs_real)
tTJSVariant::tTJSVariant(const tjs_uint8 * *)
tTJSVariant::~ tTJSVariant()
tTJSVariantType tTJSVariant::Type()
void tTJSVariant::Clear()
tTJSVariantClosure & tTJSVariant::AsObjectClosure()
void tTJSVariant::ToObject()
tTJSVariant::operator iTJSDispatch2 *()
void tTJSVariant::ToString()
tjs_uint32 * tTJSVariant::GetHint()
void tTJSVariant::ToOctet()
void tTJSVariant::ToInteger()
void tTJSVariant::ToReal()
tTJSVariant & tTJSVariant::operator =(const tTJSVariant &)
void tTJSVariant::CopyRef(const tTJSVariant &)
tTJSVariant & tTJSVariant::operator =(iTJSDispatch2 *)
tTJSVariant & tTJSVariant::SetObject(iTJSDispatch2 *)
tTJSVariant & tTJSVariant::SetObject(iTJSDispatch2 *,iTJSDispatch2 *)
tTJSVariant & tTJSVariant::operator =(tTJSVariantClosure)
tTJSVariant & tTJSVariant::operator =(tTJSVariantString *)
tTJSVariant & tTJSVariant::operator =(tTJSVariantOctet *)
tTJSVariant & tTJSVariant::operator =(const tTJSString &)
tTJSVariant & tTJSVariant::operator =(const tjs_char *)
tTJSVariant & tTJSVariant::operator =(const tjs_nchar *)
tTJSVariant & tTJSVariant::operator =(bool)
tTJSVariant & tTJSVariant::operator =(tjs_int32)
tTJSVariant & tTJSVariant::operator =(const tTVInteger)
tTJSVariant & tTJSVariant::operator =(tjs_real)
void tTJSVariant::logicalorequal(const tTJSVariant &)
void tTJSVariant::logicalandequal(const tTJSVariant &)
void tTJSVariant::operator |=(const tTJSVariant &)
void tTJSVariant::increment()
void tTJSVariant::decrement()
void tTJSVariant::operator ^=(const tTJSVariant &)
void tTJSVariant::operator &=(const tTJSVariant &)
void tTJSVariant::operator >>=(const tTJSVariant &)
void tTJSVariant::rbitshiftequal(const tTJSVariant &)
void tTJSVariant::operator <<=(const tTJSVariant &)
void tTJSVariant::operator %=(const tTJSVariant &)
void tTJSVariant::operator /=(const tTJSVariant &)
void tTJSVariant::idivequal(const tTJSVariant &)
void tTJSVariant::operator *=(const tTJSVariant &)
void tTJSVariant::logicalnot()
void tTJSVariant::bitnot()
void tTJSVariant::tonumber()
void tTJSVariant::changesign()
void tTJSVariant::operator -=(const tTJSVariant &)
void tTJSVariant::operator +=(const tTJSVariant &)
tTJSVariantType tTJSVariant::Type() const
bool tTJSVariant::NormalCompare(const tTJSVariant &) const
bool tTJSVariant::DiscernCompare(const tTJSVariant &) const
bool tTJSVariant::DiscernCompareStrictReal(const tTJSVariant &) const
bool tTJSVariant::GreaterThan(const tTJSVariant &) const
bool tTJSVariant::LittlerThan(const tTJSVariant &) const
bool tTJSVariant::IsInstanceOf(const tjs_char *) const
iTJSDispatch2 * tTJSVariant::AsObject() const
iTJSDispatch2 * tTJSVariant::AsObjectNoAddRef() const
iTJSDispatch2 * tTJSVariant::AsObjectThis() const
iTJSDispatch2 * tTJSVariant::AsObjectThisNoAddRef() const
tTJSVariantClosure & tTJSVariant::AsObjectClosureNoAddRef() const
tTJSVariantString * tTJSVariant::AsString() const
tTJSVariantString * tTJSVariant::AsStringNoAddRef() const
const tjs_char * tTJSVariant::GetString() const
tTJSVariantOctet * tTJSVariant::AsOctet() const
tTJSVariantOctet * tTJSVariant::AsOctetNoAddRef() const
tTVInteger tTJSVariant::AsInteger() const
void tTJSVariant::AsNumber(tTJSVariant &) const
tTJSVariant::operator tTVInteger() const
tTJSVariant::operator bool() const
tTJSVariant::operator tjs_int() const
tTVReal tTJSVariant::AsReal() const
tTJSVariant::operator tTVReal() const
tTJSVariant tTJSVariant::operator ||(const tTJSVariant &) const
tTJSVariant tTJSVariant::operator &&(const tTJSVariant &) const
tTJSVariant tTJSVariant::operator |(const tTJSVariant &) const
tTJSVariant tTJSVariant::operator ^(const tTJSVariant &) const
tTJSVariant tTJSVariant::operator &(const tTJSVariant &) const
tTJSVariant tTJSVariant::operator !=(const tTJSVariant &) const
tTJSVariant tTJSVariant::operator ==(const tTJSVariant &) const
tTJSVariant tTJSVariant::operator <(const tTJSVariant &) const
tTJSVariant tTJSVariant::operator >(const tTJSVariant &) const
tTJSVariant tTJSVariant::operator <=(const tTJSVariant &) const
tTJSVariant tTJSVariant::operator >=(const tTJSVariant &) const
tTJSVariant tTJSVariant::operator >>(const tTJSVariant &) const
tTJSVariant tTJSVariant::rbitshift(tjs_int) const
tTJSVariant tTJSVariant::operator <<(const tTJSVariant &) const
tTJSVariant tTJSVariant::operator %(const tTJSVariant &) const
tTJSVariant tTJSVariant::operator /(const tTJSVariant &) const
tTJSVariant tTJSVariant::idiv(const tTJSVariant &) const
tTJSVariant tTJSVariant::operator *(const tTJSVariant &) const
tTJSVariant tTJSVariant::operator !() const
tTJSVariant tTJSVariant::operator ~() const
tTJSVariant tTJSVariant::operator -(const tTJSVariant &) const
tTJSVariant tTJSVariant::operator +() const
tTJSVariant tTJSVariant::operator -() const
tTJSVariant tTJSVariant::operator +(const tTJSVariant &) const
void * tTJSVariant::operator new(size_t)
void tTJSVariant::operator delete(void *)
void * tTJSVariant::operator new [](size_t)
void tTJSVariant::operator delete [](void *)
void * tTJSVariant::operator new(size_t,void *)
tTJSVariantOctet::tTJSVariantOctet(const tjs_uint8 *,tjs_uint)
tTJSVariantOctet::tTJSVariantOctet(const tjs_uint8 *,tjs_uint,const tjs_uint8 *,tjs_uint)
tTJSVariantOctet::tTJSVariantOctet(const tTJSVariantOctet *,const tTJSVariantOctet *)
tTJSVariantOctet::~ tTJSVariantOctet()
void tTJSVariantOctet::AddRef()
void tTJSVariantOctet::Release()
tjs_uint tTJSVariantOctet::GetLength() const
const tjs_uint8 * tTJSVariantOctet::GetData() const
tTJSString::tTJSString()
tTJSString::tTJSString(const tTJSString &)
tTJSString::tTJSString(tTJSVariantString *)
tTJSString::tTJSString(const tjs_char *)
tTJSString::tTJSString(const tjs_nchar *)
tTJSString::tTJSString(const tTJSStringBufferLength)
tTJSString::tTJSString(tjs_char)
tTJSString::tTJSString(const tTJSVariant &)
tTJSString::tTJSString(const tTJSString &,int)
tTJSString::tTJSString(const tjs_char *,int)
tTJSString::tTJSString(tjs_int)
tTJSString::~ tTJSString()
tTJSString & tTJSString::operator =(const tTJSString &)
tTJSString & tTJSString::operator =(const tjs_char *)
tTJSString & tTJSString::operator =(const tjs_nchar *)
void tTJSString::operator +=(const tTJSString &)
void tTJSString::operator +=(const tTJSVariantString *)
void tTJSString::operator +=(const tjs_char *)
void tTJSString::operator +=(tjs_char)
void tTJSString::Clear()
tjs_char * tTJSString::AllocBuffer(tjs_uint)
tjs_char * tTJSString::AppendBuffer(tjs_uint)
void tTJSString::FixLen()
void tTJSString::Replace(const tTJSString &,const tTJSString &,bool)
void tTJSString::ToLowerCase()
void tTJSString::ToUppserCase()
tjs_uint32 * tTJSString::GetHint()
tjs_char * tTJSString::Independ()
const tjs_char * tTJSString::c_str() const
tTJSVariantString * tTJSString::AsVariantStringNoAddRef() const
tjs_int64 tTJSString::AsInteger() const
bool tTJSString::operator ==(const tTJSString &) const
bool tTJSString::operator !=(const tTJSString &) const
tjs_int tTJSString::CompareIC(const tTJSString &) const
bool tTJSString::operator ==(const tjs_char *) const
bool tTJSString::operator !=(const tjs_char *) const
tjs_int tTJSString::CompareIC(const tjs_char *) const
bool tTJSString::operator <(const tTJSString &) const
bool tTJSString::operator >(const tTJSString &) const
tTJSString tTJSString::operator +(const tTJSString &) const
tTJSString tTJSString::operator +(const tjs_char *) const
tTJSString tTJSString::operator +(tjs_char) const
tjs_char tTJSString::operator [](tjs_uint) const
void tTJSString::AsLowerCase(tTJSString &) const
void tTJSString::AsUpperCase(tTJSString &) const
void tTJSString::EscapeC(tTJSString &) const
void tTJSString::UnescapeC(tTJSString &) const
bool tTJSString::StartsWith(const tjs_char *) const
bool tTJSString::StartsWith(const tTJSString &) const
tjs_int tTJSString::GetNarrowStrLen() const
void tTJSString::ToNarrowStr(tjs_nchar *,tjs_int) const
bool tTJSString::IsEmpty() const
tjs_int tTJSString::GetLen() const
tjs_int tTJSString::length() const
tjs_char tTJSString::GetLastChar() const
void * tTJSString::operator new(size_t)
void tTJSString::operator delete(void *)
void * tTJSString::operator new [](size_t)
void tTJSString::operator delete [](void *)
void * tTJSString::operator new(size_t,void *)
void tTJSVariantString::AddRef()
void tTJSVariantString::Release()
void tTJSVariantString::SetString(const tjs_char *,tjs_int)
void tTJSVariantString::SetString(const tjs_nchar *)
void tTJSVariantString::AllocBuffer(tjs_uint)
void tTJSVariantString::ResetString(const tjs_char *)
void tTJSVariantString::AppendBuffer(tjs_uint)
void tTJSVariantString::Append(const tjs_char *)
void tTJSVariantString::Append(const tjs_char *,tjs_int)
tTJSVariantString * tTJSVariantString::FixLength()
tjs_uint32 * tTJSVariantString::GetHint()
tTJSVariantString::operator const tjs_char *() const
tjs_int tTJSVariantString::GetLength() const
tTVInteger tTJSVariantString::ToInteger() const
tTVReal tTJSVariantString::ToReal() const
void tTJSVariantString::ToNumber(tTJSVariant &) const
tjs_int tTJSVariantString::GetRefCount() const
tjs_int ::TJS_atoi(const tjs_char *)
tjs_char * ::TJS_int_to_str(tjs_int,tjs_char *)
tjs_char * ::TJS_tTVInt_to_str(tjs_int64,tjs_char *)
tjs_int ::TJS_strnicmp(const tjs_char *,const tjs_char *,size_t)
tjs_int ::TJS_stricmp(const tjs_char *,const tjs_char *)
void ::TJS_strcpy_maxlen(tjs_char *,const tjs_char *,size_t)
void ::TJS_strcpy(tjs_char *,const tjs_char *)
size_t ::TJS_strlen(const tjs_char *)
tjs_char * ::TJSVS_malloc(tjs_uint)
tjs_char * ::TJSVS_realloc(tjs_char *,tjs_uint)
void ::TJSVS_free(tjs_char *)
tTJSVariantString * ::TJSAllocVariantString(const tjs_char *,const tjs_char *)
tTJSVariantString * ::TJSAllocVariantString(const tjs_char *,tjs_int)
tTJSVariantString * ::TJSAllocVariantString(const tjs_char *)
tTJSVariantString * ::TJSAllocVariantString(const tjs_nchar *)
tTJSVariantString * ::TJSAllocVariantString(const tjs_uint8 * *)
tTJSVariantString * ::TJSAllocVariantStringBuffer(tjs_uint)
tTJSVariantString * ::TJSAppendVariantString(tTJSVariantString *,const tjs_char *)
tTJSVariantString * ::TJSAppendVariantString(tTJSVariantString *,const tTJSVariantString *)
tTJSVariantString * ::TJSFormatString(const tjs_char *,tjs_uint,tTJSVariant * *)
const tjs_char * ::TJSVariantTypeToTypeString(tTJSVariantType)
tTJSString ::TJSVariantToReadableString(const tTJSVariant &,tjs_int)
tTJSString ::TJSVariantToExpressionString(const tTJSVariant &)
void * ::TJSAlignedAlloc(tjs_uint,tjs_uint)
void ::TJSAlignedDealloc(void *)
tjs_uint32 ::TJSGetFPClass(tjs_real)
tTJSString ::operator +(const tjs_char *,const tTJSString &)
tTJSString ::TJSInt32ToHex(tjs_uint32,int)
tjs_int32 ::TJSRegisterNativeClass(const tjs_char *)
tjs_int32 ::TJSFindNativeClassID(const tjs_char *)
const tjs_char * ::TJSFindNativeClassName(tjs_int32)
tTJSNativeClassMethod * ::TJSCreateNativeClassMethod(tTJSNativeClassMethodCallback)
tTJSNativeClassMethod * ::TJSCreateNativeClassConstructor(tTJSNativeClassMethodCallback)
tTJSNativeClassProperty * ::TJSCreateNativeClassProperty(tTJSNativeClassPropertyGetCallback,tTJSNativeClassPropertySetCallback)
void ::TJSNativeClassRegisterNCM(tTJSNativeClass *,const tjs_char *,iTJSDispatch2 *,const tjs_char *,tTJSNativeInstanceType,tjs_uint32)
void ::TJSNativeClassSetClassID(tTJSNativeClass *,tjs_int32)
tTJSNativeClassForPlugin * ::TJSCreateNativeClassForPlugin(const ttstr &,tTJSCreateNativeInstance)
void ::TJSThrowNullAccess()
void ::TJSThrowDivideByZero()
tTJSVariantOctet * ::TJSAllocVariantOctet(const tjs_uint8 *,tjs_uint)
tTJSVariantOctet * ::TJSAllocVariantOctet(const tjs_uint8 *,tjs_uint,const tjs_uint8 *,tjs_uint)
tTJSVariantOctet * ::TJSAllocVariantOctet(const tTJSVariantOctet *,const tTJSVariantOctet *)
tTJSVariantOctet * ::TJSAllocVariantOctet(const tjs_uint8 * *)
void ::TJSDeallocVariantOctet(tTJSVariantOctet *)
tTJSVariantString * ::TJSOctetToListString(const tTJSVariantOctet *)
tTJSVariantString * ::TJSObjectToString(const tTJSVariantClosure &)
tTJSVariantString * ::TJSIntegerToString(tjs_int64)
tTJSVariantString * ::TJSRealToString(tjs_real)
tTJSVariantString * ::TJSRealToHexString(tjs_real)
tTVInteger ::TJSStringToInteger(const tjs_char *)
tTVReal ::TJSStringToReal(const tjs_char *)
iTJSDispatch2 * ::TJSCreateArrayObject(iTJSDispatch2 * *)
tjs_int ::TJSGetArrayElementCount(iTJSDispatch2 *)
tjs_int ::TJSCopyArrayElementTo(iTJSDispatch2 *,tTJSVariant *,tjs_uint,tjs_int)
iTJSDispatch2 * ::TJSCreateDictionaryObject(iTJSDispatch2 * *)
ttstr ::TJSGetMessageMapMessage(const tjs_char *)
ttstr ::TJSMapGlobalStringMap(const ttstr &)
void ::TJSDoVariantOperation(tjs_int,tTJSVariant &,const tTJSVariant *)
void ::TJSDoRehash()
iTJSDispatch2 * ::TJSCreateCustomObject()
ttstr ::TVPGetTemporaryName()
ttstr ::TVPGetAppPath()
void ::TVPRegisterStorageMedia(iTVPStorageMedia *)
void ::TVPUnregisterStorageMedia(iTVPStorageMedia *)
bool ::TVPIsExistentStorageNoSearch(const ttstr &)
bool ::TVPIsExistentStorageNoSearchNoNormalize(const ttstr &)
ttstr ::TVPNormalizeStorageName(const ttstr &)
void ::TVPSetCurrentDirectory(const ttstr &)
void ::TVPGetLocalName(ttstr &)
ttstr ::TVPExtractStorageExt(const ttstr &)
ttstr ::TVPExtractStorageName(const ttstr &)
ttstr ::TVPExtractStoragePath(const ttstr &)
ttstr ::TVPChopStorageExt(const ttstr &)
void ::TVPAddAutoPath(const ttstr &)
void ::TVPRemoveAutoPath(const ttstr &)
ttstr ::TVPGetPlacedPath(const ttstr &)
bool ::TVPIsExistentStorage(const ttstr &)
void ::TVPClearStorageCaches()
iTJSTextReadStream * ::TVPCreateTextStreamForRead(const ttstr &,const ttstr &)
iTJSTextWriteStream * ::TVPCreateTextStreamForWrite(const ttstr &,const ttstr &)
tjs_int ::TVPWideCharToUtf8String(const tjs_char *,char *)
tjs_int ::TVPUtf8ToWideCharString(const char *,tjs_char *)
void ::TVPSetXP3ArchiveExtractionFilter(tTVPXP3ArchiveExtractionFilter)
void ::TVPBreathe()
bool ::TVPGetBreathing()
void ::TVPSetSystemEventDisabledState(bool)
bool ::TVPGetSystemEventDisabledState()
void ::TVPPostEvent(iTJSDispatch2 *,iTJSDispatch2 *,ttstr &,tjs_uint32,tjs_uint32,tjs_uint,tTJSVariant *)
tjs_int ::TVPCancelEvents(iTJSDispatch2 *,iTJSDispatch2 *,const ttstr &,tjs_uint32)
bool ::TVPAreEventsInQueue(iTJSDispatch2 *,iTJSDispatch2 *,const ttstr &,tjs_uint32)
tjs_int ::TVPCountEventsInQueue(iTJSDispatch2 *,iTJSDispatch2 *,const ttstr &,tjs_uint32)
void ::TVPCancelEventsByTag(iTJSDispatch2 *,iTJSDispatch2 *,tjs_uint32)
void ::TVPCancelSourceEvents(iTJSDispatch2 *)
iTJSDispatch2 * ::TVPCreateEventObject(const tjs_char *,iTJSDispatch2 *,iTJSDispatch2 *)
void ::TVPAddContinuousEventHook(tTVPContinuousEventCallbackIntf *)
void ::TVPRemoveContinuousEventHook(tTVPContinuousEventCallbackIntf *)
void ::TVPAddCompactEventHook(tTVPCompactEventCallbackIntf *)
void ::TVPRemoveCompactEventHook(tTVPCompactEventCallbackIntf *)
ttstr ::TVPGetPlatformName()
ttstr ::TVPGetOSName()
bool ::TVPGetAsyncKeyState(tjs_uint,bool)
iTJSDispatch2 * ::TVPGetScriptDispatch()
void ::TVPExecuteScript(const ttstr &,tTJSVariant *)
void ::TVPExecuteExpression(const ttstr &,tTJSVariant *)
void ::TVPExecuteScript(const ttstr &,const ttstr &,tjs_int,tTJSVariant *)
void ::TVPExecuteExpression(const ttstr &,const ttstr &,tjs_int,tTJSVariant *)
void ::TVPExecuteStorage(const ttstr &,tTJSVariant *,bool,const tjs_char *)
void ::TVPDumpScriptEngine()
void ::TVPCreateMessageMapFile(const ttstr &)
bool ::TVPCheckExistentLocalFolder(const ttstr &)
bool ::TVPCheckExistentLocalFile(const ttstr &)
bool ::TVPCreateFolders(const ttstr &)
IStream * ::TVPCreateIStream(const ttstr &,tjs_uint32)
tTJSBinaryStream * ::TVPCreateBinaryStreamAdapter(IStream *)
void ::TVPThrowPluginUnboundFunctionError(const char *)
void ::TVPThrowPluginUnboundFunctionError(const tjs_char *)
void * ::TVP_malloc(size_t)
void * ::TVP_realloc(void *,size_t)
void ::TVP_free(void *)
tjs_int ::TVPGetAutoLoadPluginCount()
int ::ZLIB_uncompress(unsigned char *,unsigned long *,const unsigned char *,unsigned long)
int ::ZLIB_compress(unsigned char *,unsigned long *,const unsigned char *,unsigned long)
int ::ZLIB_compress2(unsigned char *,unsigned long *,const unsigned char *,unsigned long,int)
void ::TVP_md5_init(TVP_md5_state_t *)
void ::TVP_md5_append(TVP_md5_state_t *,const tjs_uint8 *,int)
void ::TVP_md5_finish(TVP_md5_state_t *,tjs_uint8 *)
HWND ::TVPGetApplicationWindowHandle()
void ::TVPProcessApplicationMessages()
void ::TVPHandleApplicationMessage()
bool ::TVPRegisterGlobalObject(const tjs_char *,iTJSDispatch2 *)
bool ::TVPRemoveGlobalObject(const tjs_char *)
void ::TVPDoTryBlock(tTVPTryBlockFunction,tTVPCatchBlockFunction,tTVPFinallyBlockFunction,void *)
bool ::TVPGetFileVersionOf(const char *,tjs_int &,tjs_int &,tjs_int &,tjs_int &)
bool ::TVPGetCommandLine(const tjs_char *,tTJSVariant *)
tjs_int ::TVPGetCommandLineArgumentGeneration()
void ::TVPSetCommandLine(const tjs_char *,const ttstr &)
tjs_uint32 ::TVPGetCPUType()
void ::TVPAddLog(const ttstr &)
void ::TVPAddImportantLog(const ttstr &)
void ::TVPPushEnvironNoise(const void *,tjs_int)
void ::TVPGetRandomBits128(void *)
bool ::TVPClipboardHasFormat(tTVPClipboardFormat)
void ::TVPClipboardSetText(const ttstr &)
bool ::TVPClipboardGetText(ttstr &)
tjs_uint64 ::TVPGetTickCount()
ttstr ::TVPFormatMessage(const tjs_char *,const ttstr &)
ttstr ::TVPFormatMessage(const tjs_char *,const ttstr &,const ttstr &)
void ::TVPThrowExceptionMessage(const tjs_char *)
void ::TVPThrowExceptionMessage(const tjs_char *,const ttstr &,tjs_int)
void ::TVPThrowExceptionMessage(const tjs_char *,const ttstr &)
void ::TVPThrowExceptionMessage(const tjs_char *,const ttstr &,const ttstr &)
ttstr ::TVPGetAboutString()
ttstr ::TVPGetVersionInformation()
ttstr ::TVPGetVersionString()
void ::TVPGetSystemVersion(tjs_int &,tjs_int &,tjs_int &,tjs_int &)
void ::TVPGetTJSVersion(tjs_int &,tjs_int &,tjs_int &)
void ::TVPConvertPCMTo16bits(tjs_int16 *,const void *,const tTVPWaveFormat &,tjs_int,bool)
void ::TVPConvertPCMTo16bits(tjs_int16 *,const void *,tjs_int,tjs_int,tjs_int,bool,tjs_int,bool)
void ::TVPConvertPCMToFloat(float *,const void *,tjs_int,tjs_int,tjs_int,bool,tjs_int)
void ::TVPConvertPCMToFloat(float *,const void *,const tTVPWaveFormat &,tjs_int)
void ::TVPReleaseDirectSound()
IDirectSound * ::TVPGetDirectSound()
void ::TVPMIDIOutData(const tjs_uint8 *,int)
void ::TVPClearGraphicCache()
tjs_uint32 ::TVPToActualColor(tjs_uint32)
tjs_uint32 ::TVPFromActualColor(tjs_uint32)
iTJSDispatch2 * ::TVPGetObjectFrom_NI_BaseLayer(tTJSNI_BaseLayer *)
tjs_uint32 ::TVPGetCurrentShiftKeyState()
void ::TVPEnsureDirectDrawObject()
IDirectDraw2 * ::TVPGetDirectDrawObjectNoAddRef()
IDirectDraw7 * ::TVPGetDirectDraw7ObjectNoAddRef()
IDirectDrawSurface * ::TVPGetDDPrimarySurfaceNoAddRef()
void ::TVPSetDDPrimaryClipper(IDirectDrawClipper *)
void ::TVPReleaseDDPrimarySurface()
iTVPScanLineProvider * ::TVPSLPLoadImage(const ttstr &,tjs_int,tjs_uint32,tjs_uint,tjs_uint)
void ::TVPAddTransHandlerProvider(iTVPTransHandlerProvider *)
void ::TVPRemoveTransHandlerProvider(iTVPTransHandlerProvider *)
void ::TVPAlphaBlend(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPAlphaBlend_HDA(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPAlphaBlend_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPAlphaBlend_HDA_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPAlphaBlend_d(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPAlphaBlend_a(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPAlphaBlend_do(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPAlphaBlend_ao(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPAlphaColorMat(tjs_uint32 *,const tjs_uint32,tjs_int)
void ::TVPAdditiveAlphaBlend(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPAdditiveAlphaBlend_HDA(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPAdditiveAlphaBlend_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPAdditiveAlphaBlend_HDA_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPAdditiveAlphaBlend_a(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPAdditiveAlphaBlend_ao(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPConvertAdditiveAlphaToAlpha(tjs_uint32 *,tjs_int)
void ::TVPConvertAlphaToAdditiveAlpha(tjs_uint32 *,tjs_int)
void ::TVPStretchAlphaBlend(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPStretchAlphaBlend_HDA(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPStretchAlphaBlend_o(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int)
void ::TVPStretchAlphaBlend_HDA_o(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int)
void ::TVPStretchAlphaBlend_d(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPStretchAlphaBlend_a(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPStretchAlphaBlend_do(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int)
void ::TVPStretchAlphaBlend_ao(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int)
void ::TVPStretchAdditiveAlphaBlend(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPInterpStretchAdditiveAlphaBlend(tjs_uint32 *,tjs_int,const tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int,tjs_int)
void ::TVPStretchAdditiveAlphaBlend_HDA(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPStretchAdditiveAlphaBlend_o(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int)
void ::TVPInterpStretchAdditiveAlphaBlend_o(tjs_uint32 *,tjs_int,const tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int)
void ::TVPStretchAdditiveAlphaBlend_HDA_o(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int)
void ::TVPStretchAdditiveAlphaBlend_a(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPStretchAdditiveAlphaBlend_ao(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int)
void ::TVPLinTransAlphaBlend(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)
void ::TVPLinTransAlphaBlend_HDA(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)
void ::TVPLinTransAlphaBlend_o(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)
void ::TVPLinTransAlphaBlend_HDA_o(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)
void ::TVPLinTransAlphaBlend_d(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)
void ::TVPLinTransAlphaBlend_a(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)
void ::TVPLinTransAlphaBlend_do(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)
void ::TVPLinTransAlphaBlend_ao(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)
void ::TVPLinTransAdditiveAlphaBlend(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)
void ::TVPInterpLinTransAdditiveAlphaBlend(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)
void ::TVPLinTransAdditiveAlphaBlend_HDA(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)
void ::TVPLinTransAdditiveAlphaBlend_o(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)
void ::TVPInterpLinTransAdditiveAlphaBlend_o(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)
void ::TVPLinTransAdditiveAlphaBlend_HDA_o(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)
void ::TVPLinTransAdditiveAlphaBlend_a(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)
void ::TVPLinTransAdditiveAlphaBlend_ao(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)
void ::TVPCopyOpaqueImage(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPConstAlphaBlend(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPConstAlphaBlend_HDA(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPConstAlphaBlend_d(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPConstAlphaBlend_a(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPStretchCopyOpaqueImage(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPStretchConstAlphaBlend(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int)
void ::TVPInterpStretchConstAlphaBlend(tjs_uint32 *,tjs_int,const tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int)
void ::TVPStretchConstAlphaBlend_HDA(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int)
void ::TVPStretchConstAlphaBlend_d(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int)
void ::TVPStretchConstAlphaBlend_a(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int)
void ::TVPLinTransCopyOpaqueImage(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)
void ::TVPLinTransConstAlphaBlend(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)
void ::TVPInterpLinTransConstAlphaBlend(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)
void ::TVPLinTransConstAlphaBlend_HDA(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)
void ::TVPLinTransConstAlphaBlend_d(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)
void ::TVPLinTransConstAlphaBlend_a(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)
void ::TVPConstAlphaBlend_SD(tjs_uint32 *,const tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPConstAlphaBlend_SD_a(tjs_uint32 *,const tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPConstAlphaBlend_SD_d(tjs_uint32 *,const tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPInitUnivTransBlendTable(tjs_uint32 *,tjs_int,tjs_int)
void ::TVPInitUnivTransBlendTable_d(tjs_uint32 *,tjs_int,tjs_int)
void ::TVPInitUnivTransBlendTable_a(tjs_uint32 *,tjs_int,tjs_int)
void ::TVPUnivTransBlend(tjs_uint32 *,const tjs_uint32 *,const tjs_uint32 *,const tjs_uint8 *,const tjs_uint32 *,tjs_int)
void ::TVPUnivTransBlend_switch(tjs_uint32 *,const tjs_uint32 *,const tjs_uint32 *,const tjs_uint8 *,const tjs_uint32 *,tjs_int,tjs_int,tjs_int)
void ::TVPUnivTransBlend_d(tjs_uint32 *,const tjs_uint32 *,const tjs_uint32 *,const tjs_uint8 *,const tjs_uint32 *,tjs_int)
void ::TVPUnivTransBlend_switch_d(tjs_uint32 *,const tjs_uint32 *,const tjs_uint32 *,const tjs_uint8 *,const tjs_uint32 *,tjs_int,tjs_int,tjs_int)
void ::TVPUnivTransBlend_a(tjs_uint32 *,const tjs_uint32 *,const tjs_uint32 *,const tjs_uint8 *,const tjs_uint32 *,tjs_int)
void ::TVPUnivTransBlend_switch_a(tjs_uint32 *,const tjs_uint32 *,const tjs_uint32 *,const tjs_uint8 *,const tjs_uint32 *,tjs_int,tjs_int,tjs_int)
void ::TVPApplyColorMap(tjs_uint32 *,const tjs_uint8 *,tjs_int,tjs_uint32)
void ::TVPApplyColorMap_o(tjs_uint32 *,const tjs_uint8 *,tjs_int,tjs_uint32,tjs_int)
void ::TVPApplyColorMap65(tjs_uint32 *,const tjs_uint8 *,tjs_int,tjs_uint32)
void ::TVPApplyColorMap65_o(tjs_uint32 *,const tjs_uint8 *,tjs_int,tjs_uint32,tjs_int)
void ::TVPApplyColorMap_HDA(tjs_uint32 *,const tjs_uint8 *,tjs_int,tjs_uint32)
void ::TVPApplyColorMap_HDA_o(tjs_uint32 *,const tjs_uint8 *,tjs_int,tjs_uint32,tjs_int)
void ::TVPApplyColorMap65_HDA(tjs_uint32 *,const tjs_uint8 *,tjs_int,tjs_uint32)
void ::TVPApplyColorMap65_HDA_o(tjs_uint32 *,const tjs_uint8 *,tjs_int,tjs_uint32,tjs_int)
void ::TVPApplyColorMap_d(tjs_uint32 *,const tjs_uint8 *,tjs_int,tjs_uint32)
void ::TVPApplyColorMap65_d(tjs_uint32 *,const tjs_uint8 *,tjs_int,tjs_uint32)
void ::TVPApplyColorMap_a(tjs_uint32 *,const tjs_uint8 *,tjs_int,tjs_uint32)
void ::TVPApplyColorMap65_a(tjs_uint32 *,const tjs_uint8 *,tjs_int,tjs_uint32)
void ::TVPApplyColorMap_do(tjs_uint32 *,const tjs_uint8 *,tjs_int,tjs_uint32,tjs_int)
void ::TVPApplyColorMap65_do(tjs_uint32 *,const tjs_uint8 *,tjs_int,tjs_uint32,tjs_int)
void ::TVPApplyColorMap_ao(tjs_uint32 *,const tjs_uint8 *,tjs_int,tjs_uint32,tjs_int)
void ::TVPApplyColorMap65_ao(tjs_uint32 *,const tjs_uint8 *,tjs_int,tjs_uint32,tjs_int)
void ::TVPConstColorAlphaBlend(tjs_uint32 *,tjs_int,tjs_uint32,tjs_int)
void ::TVPConstColorAlphaBlend_d(tjs_uint32 *,tjs_int,tjs_uint32,tjs_int)
void ::TVPConstColorAlphaBlend_a(tjs_uint32 *,tjs_int,tjs_uint32,tjs_int)
void ::TVPRemoveConstOpacity(tjs_uint32 *,tjs_int,tjs_int)
void ::TVPRemoveOpacity(tjs_uint32 *,const tjs_uint8 *,tjs_int)
void ::TVPRemoveOpacity_o(tjs_uint32 *,const tjs_uint8 *,tjs_int,tjs_int)
void ::TVPRemoveOpacity65(tjs_uint32 *,const tjs_uint8 *,tjs_int)
void ::TVPRemoveOpacity65_o(tjs_uint32 *,const tjs_uint8 *,tjs_int,tjs_int)
void ::TVPAddBlend(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPAddBlend_HDA(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPAddBlend_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPAddBlend_HDA_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPSubBlend(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPSubBlend_HDA(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPSubBlend_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPSubBlend_HDA_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPMulBlend(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPMulBlend_HDA(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPMulBlend_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPMulBlend_HDA_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPColorDodgeBlend(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPColorDodgeBlend_HDA(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPColorDodgeBlend_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPColorDodgeBlend_HDA_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPDarkenBlend(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPDarkenBlend_HDA(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPDarkenBlend_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPDarkenBlend_HDA_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPLightenBlend(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPLightenBlend_HDA(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPLightenBlend_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPLightenBlend_HDA_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPScreenBlend(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPScreenBlend_HDA(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPScreenBlend_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPScreenBlend_HDA_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPStretchCopy(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPInterpStretchCopy(tjs_uint32 *,tjs_int,const tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int,tjs_int)
void ::TVPFastLinearInterpH2F(tjs_uint32 *,tjs_int,const tjs_uint32 *)
void ::TVPFastLinearInterpH2B(tjs_uint32 *,tjs_int,const tjs_uint32 *)
void ::TVPFastLinearInterpV2(tjs_uint32 *,tjs_int,const tjs_uint32 *,const tjs_uint32 *)
void ::TVPStretchColorCopy(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPLinTransCopy(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)
void ::TVPInterpLinTransCopy(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)
void ::TVPLinTransColorCopy(tjs_uint32 *,tjs_int,const tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)
void ::TVPMakeAlphaFromKey(tjs_uint32 *,tjs_int,tjs_uint32)
void ::TVPCopyMask(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPCopyColor(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPBindMaskToMain(tjs_uint32 *,const tjs_uint8 *,tjs_int)
void ::TVPFillARGB(tjs_uint32 *,tjs_int,tjs_uint32)
void ::TVPFillARGB_NC(tjs_uint32 *,tjs_int,tjs_uint32)
void ::TVPFillColor(tjs_uint32 *,tjs_int,tjs_uint32)
void ::TVPFillMask(tjs_uint32 *,tjs_int,tjs_uint32)
void ::TVPAddSubVertSum16(tjs_uint16 *,const tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPAddSubVertSum16_d(tjs_uint16 *,const tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPAddSubVertSum32(tjs_uint32 *,const tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPAddSubVertSum32_d(tjs_uint32 *,const tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPDoBoxBlurAvg16(tjs_uint32 *,tjs_uint16 *,const tjs_uint16 *,const tjs_uint16 *,tjs_int,tjs_int)
void ::TVPDoBoxBlurAvg16_d(tjs_uint32 *,tjs_uint16 *,const tjs_uint16 *,const tjs_uint16 *,tjs_int,tjs_int)
void ::TVPDoBoxBlurAvg32(tjs_uint32 *,tjs_uint32 *,const tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPDoBoxBlurAvg32_d(tjs_uint32 *,tjs_uint32 *,const tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPSwapLine8(tjs_uint8 *,tjs_uint8 *,tjs_int)
void ::TVPSwapLine32(tjs_uint32 *,tjs_uint32 *,tjs_int)
void ::TVPReverse8(tjs_uint8 *,tjs_int)
void ::TVPReverse32(tjs_uint32 *,tjs_int)
void ::TVPDoGrayScale(tjs_uint32 *,tjs_int)
void ::TVPInitGammaAdjustTempData(tTVPGLGammaAdjustTempData *,const tTVPGLGammaAdjustData *)
void ::TVPUninitGammaAdjustTempData(tTVPGLGammaAdjustTempData *)
void ::TVPAdjustGamma(tjs_uint32 *,tjs_int,tTVPGLGammaAdjustTempData *)
void ::TVPAdjustGamma_a(tjs_uint32 *,tjs_int,tTVPGLGammaAdjustTempData *)
void ::TVPChBlurMulCopy65(tjs_uint8 *,const tjs_uint8 *,tjs_int,tjs_int)
void ::TVPChBlurAddMulCopy65(tjs_uint8 *,const tjs_uint8 *,tjs_int,tjs_int)
void ::TVPChBlurCopy65(tjs_uint8 *,tjs_int,tjs_int,tjs_int,const tjs_uint8 *,tjs_int,tjs_int,tjs_int,tjs_int,tjs_int)
void ::TVPBLExpand1BitTo8BitPal(tjs_uint8 *,const tjs_uint8 *,tjs_int,const tjs_uint32 *)
void ::TVPBLExpand1BitTo8Bit(tjs_uint8 *,const tjs_uint8 *,tjs_int)
void ::TVPBLExpand1BitTo32BitPal(tjs_uint32 *,const tjs_uint8 *,tjs_int,const tjs_uint32 *)
void ::TVPBLExpand4BitTo8BitPal(tjs_uint8 *,const tjs_uint8 *,tjs_int,const tjs_uint32 *)
void ::TVPBLExpand4BitTo8Bit(tjs_uint8 *,const tjs_uint8 *,tjs_int)
void ::TVPBLExpand4BitTo32BitPal(tjs_uint32 *,const tjs_uint8 *,tjs_int,const tjs_uint32 *)
void ::TVPBLExpand8BitTo8BitPal(tjs_uint8 *,const tjs_uint8 *,tjs_int,const tjs_uint32 *)
void ::TVPBLExpand8BitTo32BitPal(tjs_uint32 *,const tjs_uint8 *,tjs_int,const tjs_uint32 *)
void ::TVPExpand8BitTo32BitGray(tjs_uint32 *,const tjs_uint8 *,tjs_int)
void ::TVPBLConvert15BitTo8Bit(tjs_uint8 *,const tjs_uint16 *,tjs_int)
void ::TVPBLConvert15BitTo32Bit(tjs_uint32 *,const tjs_uint16 *,tjs_int)
void ::TVPBLConvert24BitTo8Bit(tjs_uint8 *,const tjs_uint8 *,tjs_int)
void ::TVPBLConvert24BitTo32Bit(tjs_uint32 *,const tjs_uint8 *,tjs_int)
void ::TVPConvert24BitTo32Bit(tjs_uint32 *,const tjs_uint8 *,tjs_int)
void ::TVPBLConvert32BitTo8Bit(tjs_uint8 *,const tjs_uint32 *,tjs_int)
void ::TVPBLConvert32BitTo32Bit_NoneAlpha(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPBLConvert32BitTo32Bit_MulAddAlpha(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPBLConvert32BitTo32Bit_AddAlpha(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPDither32BitTo16Bit565(tjs_uint16 *,const tjs_uint32 *,tjs_int,tjs_int,tjs_int)
void ::TVPDither32BitTo16Bit555(tjs_uint16 *,const tjs_uint32 *,tjs_int,tjs_int,tjs_int)
void ::TVPDither32BitTo8Bit(tjs_uint8 *,const tjs_uint32 *,tjs_int,tjs_int,tjs_int)
void ::TVPTLG5ComposeColors3To4(tjs_uint8 *,const tjs_uint8 *,tjs_uint8 * const *,tjs_int)
void ::TVPTLG5ComposeColors4To4(tjs_uint8 *,const tjs_uint8 *,tjs_uint8 * const *,tjs_int)
tjs_int ::TVPTLG5DecompressSlide(tjs_uint8 *,const tjs_uint8 *,tjs_int,tjs_uint8 *,tjs_int)
void ::TVPTLG6DecodeGolombValuesForFirst(tjs_int8 *,tjs_int,tjs_uint8 *)
void ::TVPTLG6DecodeGolombValues(tjs_int8 *,tjs_int,tjs_uint8 *)
void ::TVPTLG6DecodeLineGeneric(tjs_uint32 *,tjs_uint32 *,tjs_int,tjs_int,tjs_int,tjs_uint8 *,tjs_int,tjs_uint32 *,tjs_uint32,tjs_int,tjs_int)
void ::TVPTLG6DecodeLine(tjs_uint32 *,tjs_uint32 *,tjs_int,tjs_int,tjs_uint8 *,tjs_int,tjs_uint32 *,tjs_uint32,tjs_int,tjs_int)
void ::TVPPsAlphaBlend(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPPsAlphaBlend_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPPsAlphaBlend_HDA(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPPsAlphaBlend_HDA_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPPsAddBlend(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPPsAddBlend_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPPsAddBlend_HDA(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPPsAddBlend_HDA_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPPsSubBlend(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPPsSubBlend_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPPsSubBlend_HDA(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPPsSubBlend_HDA_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPPsMulBlend(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPPsMulBlend_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPPsMulBlend_HDA(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPPsMulBlend_HDA_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPPsScreenBlend(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPPsScreenBlend_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPPsScreenBlend_HDA(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPPsScreenBlend_HDA_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPPsOverlayBlend(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPPsOverlayBlend_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPPsOverlayBlend_HDA(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPPsOverlayBlend_HDA_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPPsHardLightBlend(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPPsHardLightBlend_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPPsHardLightBlend_HDA(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPPsHardLightBlend_HDA_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPPsSoftLightBlend(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPPsSoftLightBlend_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPPsSoftLightBlend_HDA(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPPsSoftLightBlend_HDA_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPPsColorDodgeBlend(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPPsColorDodgeBlend_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPPsColorDodgeBlend_HDA(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPPsColorDodgeBlend_HDA_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPPsColorDodge5Blend(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPPsColorDodge5Blend_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPPsColorDodge5Blend_HDA(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPPsColorDodge5Blend_HDA_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPPsColorBurnBlend(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPPsColorBurnBlend_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPPsColorBurnBlend_HDA(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPPsColorBurnBlend_HDA_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPPsLightenBlend(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPPsLightenBlend_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPPsLightenBlend_HDA(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPPsLightenBlend_HDA_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPPsDarkenBlend(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPPsDarkenBlend_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPPsDarkenBlend_HDA(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPPsDarkenBlend_HDA_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPPsDiffBlend(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPPsDiffBlend_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPPsDiffBlend_HDA(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPPsDiffBlend_HDA_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPPsDiff5Blend(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPPsDiff5Blend_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPPsDiff5Blend_HDA(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPPsDiff5Blend_HDA_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPPsExclusionBlend(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPPsExclusionBlend_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
void ::TVPPsExclusionBlend_HDA(tjs_uint32 *,const tjs_uint32 *,tjs_int)
void ::TVPPsExclusionBlend_HDA_o(tjs_uint32 *,const tjs_uint32 *,tjs_int,tjs_int)
